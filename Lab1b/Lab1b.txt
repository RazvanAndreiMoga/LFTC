Alphabet:
a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
b. Underline character ’_’;
c. Decimal digits (0-9);

Lexic:

a. Special symbols, representing:

- operators + - * / == < <= = >= !=
- separators ( ) [ ] { } : ; space newline
- reserved words: array char else if int string read return start for while write

b. Identifiers:

- A sequence of letters and digits or "_" such that the first character is "_" or a letter; the rule is:
identifier = ("_" | letter){letter|digit|"_"}
letter = "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
digit = "0" | non_zero_digit
non_zero_digit = "1" | "2" | ... | "9"

c. Constants:

intconst = "0" | ["+"|"-"]non_zero_digit{digit}
strconst = """{letter|digit|"_"|" "}"""
charconst = "’"(letter|digit|special_char)"’"
special_char = "+" | "-" | "*" | "<" | ">" | ...


Syntax:

program ::= "start" compound_statement
statement ::= (declaration | assignment_statement | if_statement |
while_statement | return_statement | for_statement | iostmt)

statement_list ::= statement | statement ";" statement_list
compound_statement ::= "{" statement_list "}"

expression ::= expression + term | expression - term | term
term ::= term * factor | term / factor | factor
factor ::= "(" expression ")" | IDENTIFIER | CONST

iostmt ::= "read" "(" IDENTIFIER ")" | "write" "(" IDENFITIER ")" | "write "(" CONST ")"

simple_type ::= "int" | "string" | "char"
array_declaration ::= "array" " " simple_type " " IDENTIFIER "[" "]"
declaration ::= simple_type " " IDENTIFIER | array_declaration

assignment_statement ::= IDENTIFIER "=" expression
if_statement ::= "if" "(" condition ")" compound_statement | "if" "(" condition ")"compound_statement "else"
compound_stawtement
while_statement ::= "while "(" condition ")" compound_statement
return statement ::= "return expression
for_statement ::= "for" for_header compound_statement
for_header ::= "(" "int" assignment_statement ";" condition ";" assignment_statement ")"

condition ::= expression relation expression
relation ::= "<" | "<=" | "==" | "!=" | ">=" | ">"


Token:

A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
0
1
2
3
4
5
6
7
8
9
+
-
*
/
==
<=
<
>
>=
!=
=
(
)
[
]
{
}
:
;
,
space
newline
read
write
if
else
for
while
int
string
char
return
start
array
